.. -*- mode: rst -*-
.. image:: https://travis-ci.com/Data4Gov/WhiteBox_Production.svg?token=1GNkopDprh4icqumn6Mz&branch=master
    :target: https://travis-ci.com/Data4Gov/WhiteBox_Production

.. image:: https://img.shields.io/badge/License-MIT-blue.svg
    :target: https://lbesson.mit-license.org/
    
.. image:: https://img.shields.io/pypi/pyversions/ansicolortags.svg
    :target: https://pypi.python.org/pypi/whitebox

WhiteBox: Simple code to make 'black box' machine learning models interpretable to humans.
===============================================================================================

White Box makes it possible for everyday humans to understand 'black-box' machine learning models in two key ways:

1. WhiteBox helps us understand how the model 'believes' different groups behave within the model 

2. WhiteBox helps makes it clear where the model is making particularly accurate or inaccurate predictions

To make communicating these findings to your team easy, WhiteBox outputs: 

- Are created with simple Python code at the end of your existing machine learning workflow and require no model re-training
- Are high quality interactive HTML files that are small enough to be emailed. 
- Attachment only require your teammate/client to have a web browser to open your attachment. No server or messy installation required.
- Do not expose your potentially sensitive raw data. Only summaries of the data are included in the final HTML file. This also makes it possible to summarize models built on extremely large datasets into file sizes that are small enough for email. 

Sample Outputs
==============

Impact
------------

Currently, many people substitute `variable importance <https://en.wikipedia.org/wiki/Random_forest#Variable_importance>`_  charts for an understanding of how the model works. While genuinely helpful, these plots do not contribute to understanding how different subgroups behave differently under the hood of the model. In the example below (`full notebook here <https://github.com/Data4Gov/WhiteBox_Production/blob/master/docs/notebooks/WineQuality_Example.ipynb>`_ and `parameter list here <https://github.com/DataScienceSquad/WhiteBox_Production/tree/master/docs>`_ ) all you have to do to produce the interactive chart is this simple segment of code: 

.. code-block:: python

    WB = WhiteBoxSensitivity(clf,
                       model_df=finaldf,
                       ydepend=ydepend,
                       cat_df=df,
                       featuredict=None,
                       groupbyvars=['AlcoholContent'],
                       aggregate_func=np.mean,
                       verbose=None,
                        std_num=2
                       )
    WB.run()
    WB.save('./WhiteBox_Sensitivity_Plots.html')

Please note all descriptive text is automatically generated by WhiteBox and use quartiles as cutoff points for the narrative text:

.. image:: https://github.com/Data4Gov/WhiteBox_Production/blob/master/images/Impact_Gif.gif

In the above example, each variable's chart is generated by going through the dataset and generating two predictions for each row. First, WhiteBox uses the modelObject to generate a prediction on all of the original data. Then each variable in question is increased by one standard deviation and the model is run again on the synthetic data. The average gap in predictions between the real data and the simulated data is the 'impact' that variable has on the dependent variable. This is repeated for all variables you are interested in. For categorical variables, the synthetic data is created by setting data not at the mode to the mode and measuring the change in the predicted values.   

Error
------------

There are a hundred ways to skin an error chart. Almost all of them are reasonable. However, few can be proceeded by the comment

.. code-block:: python

   #Send To Boss As Attachment With No Additional Editing
    WB.save('/filepathtoboss')
WhiteBox helps fill that gap for you. These error charts group the level of error by type and show where the error vary for different parts of different variables. Again, only one line of code is required to run it:

.. code-block:: python

    WB = WhiteBoxError(modelobj = modelObjc,
                       model_df = xTrainData,
                       ydepend= yDepend,
                       cat_df = wine_sub,
                       groupbyvars = groupbyVars,
                       featuredict = featuredict,
                       verbose=None)
    WB.run()
    WB.save('./WhiteBox_ErrorPlots.html')


.. image:: https://github.com/Data4Gov/WhiteBox_Production/blob/master/images/Error_Gif.gif

For a more detailed example, see our `example notebook <https://github.com/Data4Gov/WhiteBox_Production/blob/master/docs/notebooks/WineQuality_Example.ipynb>`_ and `parameter list here <https://github.com/DataScienceSquad/WhiteBox_Production/tree/master/docs>`_.

Installation
==============

Installation is easy. 

.. code-block:: none
   pip install whitebox

Requirements
------------

WhiteBox requires:

- numpy==1.11.3
- pandas==0.19.2
- sklearn==0.0
- scipy==0.18.1


Helpful Tips
============

Handling Categorical Variables
------------------------------

In many models, categorical variables are present as independent variables. To provide meaningful charts, WhiteBox require categorical dummies to have the naming convention varname_category (for example Gender_Male and Gender_Female). One way to generate these is

.. code-block:: python

   #find string variables
   categorical = final_data.select_dtypes(include={'object'})
   categorical_dummies = pd.get_dummies(categorical.applymap(str), prefix = categorical.columns)

Managing Output Length
----------------------

Many times, models will have hundreds (or more) of independent variables. To select a more managable number of variables,use the featureDict parameter (present in both functions). By feeding in a dictionary like ``{'var1' : 'Gender' , 'var2' : 'Race' }``, you will make the HTML output only print output relating to var1 and var2. Also, instead of displaying the name in your dataframe, the HTML file will display the name you give it in your dictionary. 

FAQs
--------------

Answers to additional questions about assumptions we make in our calculations can be found `here <https://github.com/DataScienceSquad/WhiteBox_Production/wiki/FAQ>`_. 


Supported Machine Learning Libraries
====================================

We currently support all sklearn regression methods and all sklearn binary classification methods. We do not support multi-class classification at this time. We will look to add support for other machine learning libraries the future. In all implementations, we are committed to keeping our 'one line of code' promise. 

We currently only support traditional tabular data. We are hoping to include text, audio, video, and images in the future but they are not part of the current implementation. 

Other Python Machine Learning Interpretability Projects
------------------------------------------------

For those looking for intepretation of individual points, please see the `Lime <https://github.com/marcotcr/lime>`_ project and its good work. `PyCEbox <https://github.com/AustinRochford/PyCEbox>`_ also has a different take on `classic partial dependence plots <http://scikit-learn.org/stable/auto_examples/ensemble/plot_partial_dependence.html>`_.


Authors:
========

Authors include: `Daniel Byler <https://www.linkedin.com/in/danielbyler/>`_, `Venkatesh Gangavarapu <https://www.linkedin.com/in/venkatesh-gangavarapu-9845b36b/>`_, `Jason Lewris <https://www.linkedin.com/in/jasonlewris/>`_, `Shruti Panda <https://www.linkedin.com/in/shruti-panda-1466216a/>`_, and `Shanti Jha <https://www.linkedin.com/in/shantijha/>`_ 

Acknowledgements
----------

Thanks to `Kenton Andersen <https://www.linkedin.com/in/kentonandersen/>`_ for his tireless help in running and operating our development environment
 
 Please drop us a line in the issues section as bugs or feature requests arise. 
